#+title: Lox Grammar rules

* Base syntax
#+begin_src text
expression => equality ;
equality   => comparison ( ("==" | "!=") comparison )* ;
comparison => term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term       => factor ( ( "+" | "-" ) factor )* ;
factor     => unary ( ( "/" | "*" ) unary )* ;
unary      => ( "!" | "-" ) unary
            | primary;
primary    => NUMBER | STRING | "true" | "false" | "nil"
            | "(" expression ")" ;
#+end_src

* Comma expression
#+begin_src text
expression => comma ;
comma      => equality ( "," equality )* ;
equality   => comparison ( ("==" | "!=") comparison )* ;
comparison => term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term       => factor ( ( "+" | "-" ) factor )* ;
factor     => unary ( ( "/" | "*" ) unary )* ;
unary      => ( "!" | "-" ) unary
            | primary;
primary    => NUMBER | STRING | "true" | "false" | "nil"
            | "(" expression ")" ;
#+end_src

* Ternary operator
#+begin_src text
expression  => comma ;
comma       => conditional ( "," conditional )* ;
conditional => equality ( "?" expression ":" conditional )? ;
equality    => comparison ( ("==" | "!=") comparison )* ;
comparison  => term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        => factor ( ( "+" | "-" ) factor )* ;
factor      => unary ( ( "/" | "*" ) unary )* ;
unary       => ( "!" | "-" ) unary
             | primary;
primary     => NUMBER | STRING | "true" | "false" | "nil"
             | "(" expression ")" ;
#+end_src

* Statements

#+begin_src text
program     => declaration* EOF ;

declaration => varDecl
             | statement
statement   => exprStmt
             | printStmt ;
varDecl     => "var" IDENTIFIER ( "=" expression )? ";" ;
exprStmt    => expression ";" ;
printStmt   => "print" expression ";" ;

expression  => comma ;
comma       => conditional ( "," conditional )* ;
conditional => assignment ( "?" expression ":" conditional )? ;
assignment  => IDENTIFIER "=" assignment
             | equality ;
equality    => comparison ( ("==" | "!=") comparison )* ;
comparison  => term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        => factor ( ( "+" | "-" ) factor )* ;
factor      => unary ( ( "/" | "*" ) unary )* ;
unary       => ( "!" | "-" ) unary
             | primary;
primary     => NUMBER | STRING | "true" | "false" | "nil"
             | "(" expression ")" ;
             | IDENTIFIER ;
#+end_src

* Blocks
#+begin_src text
program     => declaration* EOF ;

declaration => varDecl
             | statement
statement   => exprStmt
             | printStmt
             | block ;

block       => "{" declaration* "}" ;

varDecl     => "var" IDENTIFIER ( "=" expression )? ";" ;
exprStmt    => expression ";" ;
printStmt   => "print" expression ";" ;

expression  => comma ;
comma       => conditional ( "," conditional )* ;
conditional => assignment ( "?" expression ":" conditional )? ;
assignment  => IDENTIFIER "=" assignment
             | equality ;
equality    => comparison ( ("==" | "!=") comparison )* ;
comparison  => term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        => factor ( ( "+" | "-" ) factor )* ;
factor      => unary ( ( "/" | "*" ) unary )* ;
unary       => ( "!" | "-" ) unary
             | primary;
primary     => NUMBER | STRING | "true" | "false" | "nil"
             | "(" expression ")" ;
             | IDENTIFIER ;
#+end_src


* Conditionals
#+begin_src text
program     => declaration* EOF ;

declaration => varDecl
             | statement
statement   => exprStmt
             | ifStmt
             | printStmt
             | whileStmt
             | block ;

forStmt     => "for" "(" ( varDecl | exprStmt | ";" )
               expression? ";"
               expression? ")" statement ;

whileStmt  => "while" "(" expression ")" statement ;

ifStmt      => "if" "(" expression ")" statement
               ( "else" statement )? ;

block       => "{" declaration* "}" ;

varDecl     => "var" IDENTIFIER ( "=" expression )? ";" ;
exprStmt    => expression ";" ;
printStmt   => "print" expression ";" ;

expression  => comma ;
comma       => conditional ( "," conditional )* ;
conditional => assignment ( "?" expression ":" conditional )? ;
assignment  => IDENTIFIER "=" assignment
             | logic_or ;
logic_or    => logic_and ( "or" logic_and )* ;
logic_and   => equality ( "and" equality )* ;
equality    => comparison ( ("==" | "!=") comparison )* ;
comparison  => term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        => factor ( ( "+" | "-" ) factor )* ;
factor      => unary ( ( "/" | "*" ) unary )* ;
unary       => ( "!" | "-" ) unary
             | primary;
primary     => NUMBER | STRING | "true" | "false" | "nil"
             | "(" expression ")" ;
             | IDENTIFIER ;
#+end_src

* Functions
#+begin_src text
program     => declaration* EOF ;

declaration => funDecl
             | varDecl
             | statement
statement   => exprStmt
             | ifStmt
             | printStmt
             | whileStmt
             | block ;

forStmt     => "for" "(" ( varDecl | exprStmt | ";" )
               expression? ";"
               expression? ")" statement ;

whileStmt  => "while" "(" expression ")" statement ;

ifStmt      => "if" "(" expression ")" statement
               ( "else" statement )? ;

block       => "{" declaration* "}" ;

funDecl     => "fun" function ;
function    => IDENTIFIER "(" parameters? ")" block ;
parameters  => IDENTIFIER ( "," IDENTIFIER )* ;
varDecl     => "var" IDENTIFIER ( "=" expression )? ";" ;
exprStmt    => expression ";" ;
printStmt   => "print" expression ";" ;

expression  => comma ;
comma       => conditional ( "," conditional )* ;
conditional => assignment ( "?" expression ":" conditional )? ;
assignment  => IDENTIFIER "=" assignment
             | logic_or ;
logic_or    => logic_and ( "or" logic_and )* ;
logic_and   => equality ( "and" equality )* ;
equality    => comparison ( ("==" | "!=") comparison )* ;
comparison  => term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        => factor ( ( "+" | "-" ) factor )* ;
factor      => unary ( ( "/" | "*" ) unary )* ;
unary       => ( "!" | "-" ) unary
             | call;
call        => primary ( "(" arguments? ")" )* ;
arguments   => expression ( "," expression )* ;
primary     => NUMBER | STRING | "true" | "false" | "nil"
             | "(" expression ")" ;
             | IDENTIFIER ;
#+end_src
